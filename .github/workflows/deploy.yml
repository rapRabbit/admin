name: Deploy to Server

on:
  push:
    branches: [ main ]  # 当 main 分支收到推送时触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码
      - uses: actions/checkout@v3
      
      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      # 安装依赖
      - name: Install Dependencies
        run: npm ci
        
      # 构建项目
      - name: Build Project
        run: npm run build
        
      # 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-site:latest
            ${{ secrets.DOCKER_USERNAME }}/my-site:${{ github.sha }}
        
      # 登录到服务器并部署
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # 登录到 Docker Hub
            echo "正在登录 Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin || { echo "Docker 登录失败"; exit 1; }
            
            # 设置环境变量
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            
            # 拉取新镜像
            echo "拉取新镜像..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-site:latest || { echo "拉取镜像失败"; exit 1; }
            
            # 使用 Docker Compose 启动服务
            echo "启动服务..."
            cd ~/my-site  # 确保指定正确的目录路径
            docker-compose down
            docker-compose up -d
            
            # 检查容器状态
            echo "检查容器状态..."
            docker ps
            
            # 清理旧镜像
            echo "清理旧镜像..."
            docker image prune -af --filter "until=24h"
